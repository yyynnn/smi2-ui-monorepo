/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.17
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';

import type { GetInventory200, Order } from '../../../types';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * Returns a map of status codes to quantities
 * @summary Returns pet inventories by status
 */
export const getInventory = (options?: AxiosRequestConfig): Promise<AxiosResponse<GetInventory200>> => {
  return axios.get(`/petstore3.swagger.io/store/inventory`, options);
};

export const getGetInventoryQueryKey = () => [`/petstore3.swagger.io/store/inventory`];

export type GetInventoryQueryResult = NonNullable<Awaited<ReturnType<typeof getInventory>>>;
export type GetInventoryQueryError = AxiosError;

export const useGetInventory = <TData = Awaited<ReturnType<typeof getInventory>>, TError = AxiosError>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getInventory>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetInventoryQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getInventory>>> = ({ signal }) =>
    getInventory({ signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof getInventory>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * Place a new order in the store
 * @summary Place an order for a pet
 */
export const placeOrder = (order: Order, options?: AxiosRequestConfig): Promise<AxiosResponse<Order>> => {
  return axios.post(`/petstore3.swagger.io/store/order`, order, options);
};

export type PlaceOrderMutationResult = NonNullable<Awaited<ReturnType<typeof placeOrder>>>;
export type PlaceOrderMutationBody = Order;
export type PlaceOrderMutationError = AxiosError<void>;

export const usePlaceOrder = <TError = AxiosError<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof placeOrder>>, TError, { data: Order }, TContext>;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeOrder>>, { data: Order }> = (props) => {
    const { data } = props ?? {};

    return placeOrder(data, axiosOptions);
  };

  return useMutation<Awaited<ReturnType<typeof placeOrder>>, TError, { data: Order }, TContext>(
    mutationFn,
    mutationOptions,
  );
};
/**
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 * @summary Find purchase order by ID
 */
export const getOrderById = (orderId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Order>> => {
  return axios.get(`/petstore3.swagger.io/store/order/${orderId}`, options);
};

export const getGetOrderByIdQueryKey = (orderId: number) => [`/petstore3.swagger.io/store/order/${orderId}`];

export type GetOrderByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderById>>>;
export type GetOrderByIdQueryError = AxiosError<void>;

export const useGetOrderById = <TData = Awaited<ReturnType<typeof getOrderById>>, TError = AxiosError<void>>(
  orderId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOrderByIdQueryKey(orderId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderById>>> = ({ signal }) =>
    getOrderById(orderId, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof getOrderById>>, TError, TData>(queryKey, queryFn, {
    enabled: !!orderId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
 * @summary Delete purchase order by ID
 */
export const deleteOrder = (orderId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<unknown>> => {
  return axios.delete(`/petstore3.swagger.io/store/order/${orderId}`, options);
};

export type DeleteOrderMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOrder>>>;

export type DeleteOrderMutationError = AxiosError<void>;

export const useDeleteOrder = <TError = AxiosError<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteOrder>>, TError, { orderId: number }, TContext>;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOrder>>, { orderId: number }> = (props) => {
    const { orderId } = props ?? {};

    return deleteOrder(orderId, axiosOptions);
  };

  return useMutation<Awaited<ReturnType<typeof deleteOrder>>, TError, { orderId: number }, TContext>(
    mutationFn,
    mutationOptions,
  );
};
